name: CI PHP Tests

on:
  workflow_call:
    inputs:
      extensions:
        type: string
        description: The comma-separated list of extensions to install.
        default: ""
        required: false
      php-versions:
        type: string
        description: The space sparated list of PHP versions to use for the tests.
        default: "8.1"
        required: false
      min-php-version:
        type: string
        description: The minimal PHP version to use for the tests.
        default: "all"
        required: false
      suite-with-coverage:
        type: string
        description: The test suite which is used to check the code coverage.
        default: "unit-test"
        required: false

jobs:
  prepare-matrix:
    name: Prepare build matrix
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Checkout shared workflow files
        uses: actions/checkout@v2
        with:
          repository: BluePsyduck/github-workflows
          path: .shared

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: "8.1"
          coverage: none
          extensions: ${{ inputs.extensions }}

      - name: Get composer cache directory
        id: composer-cache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"

      - name: Cache composer dependencies
        uses: actions/cache@v2
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.json') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Install dependencies
        run: composer install --no-progress --no-interaction --prefer-dist --optimize-autoloader --ignore-platform-reqs

      - name: Generate build matrix
        id: matrix
        env:
          PHP_VERSIONS: ${{ inputs.php-versions }}
          MIN_PHP_VERSION: ${{ inputs.min-php-version }}
        run: |
          echo "::set-output name=matrix::$(php .shared/.github/scripts/build-matrix.php)"

      - name: Print matrix
        run: echo '${{ steps.matrix.outputs.matrix }}'
    outputs:
      matrix: ${{ steps.matrix.outputs.matrix }}

  test:
    name: PHPUnit
    needs: prepare-matrix
    if: needs.prepare-matrix.outputs.matrix != '[]'
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJson(needs.prepare-matrix.outputs.matrix) }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Checkout shared workflow files
        uses: actions/checkout@v2
        with:
          repository: BluePsyduck/github-workflows
          path: .shared

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.version }}
          coverage: ${{ matrix.suite == inputs.suite-with-coverage && 'xdebug' || 'none' }}
          extensions: ${{ inputs.extensions }}

      - name: Get composer cache directory
        id: composer-cache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"

      - name: Cache composer dependencies
        uses: actions/cache@v2
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.json') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Setup problem matchers
        run: |
          echo "::add-matcher::${{ runner.tool_cache }}/phpunit.json"
          echo "::add-matcher::.shared/.github/problem-matchers/coverage-check.json"

      - name: Install dependencies
        run: composer install --no-progress --no-interaction --prefer-dist --optimize-autoloader

      - name: Run phpunit
        run: vendor/bin/phpunit --testsuite=${{ matrix.suite }} ${{ matrix.suite == inputs.suite-with-coverage && '--coverage-clover=coverage.xml' || '' }}

      - name: Check coverage.xml existence
        id: check-coverage-file
        if: always()
        uses: andstor/file-existence-action@v1
        with:
          files: coverage.xml

      - name: Run coverage-check
        if: always() && steps.check-coverage-file.outputs.files_exists == 'true'
        run: vendor/bin/coverage-check coverage.xml 100

      - name: Upload coverage as artifacts
        if: always() && steps.check-coverage-file.outputs.files_exists == 'true'
        uses: actions/upload-artifact@v2
        with:
          name: coverage-${{ matrix.version }}
          path: coverage.xml

      - name: Upload coverage to Codecov
        if: always() && steps.check-coverage-file.outputs.files_exists == 'true'
        uses: codecov/codecov-action@v1
        with:
          name: coverage-${{ matrix.version }}
          file: coverage.xml
